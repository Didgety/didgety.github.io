<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://didgety.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://didgety.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-28T12:00:50+00:00</updated><id>https://didgety.github.io/feed.xml</id><title type="html">blank</title><subtitle></subtitle><entry><title type="html">A Rusty DNS Server</title><link href="https://didgety.github.io/blog/2023/dns_server/" rel="alternate" type="text/html" title="A Rusty DNS Server"/><published>2023-12-25T00:00:00+00:00</published><updated>2023-12-25T00:00:00+00:00</updated><id>https://didgety.github.io/blog/2023/dns_server</id><content type="html" xml:base="https://didgety.github.io/blog/2023/dns_server/"><![CDATA[<p>DNS is a rather enigmatic protocol, but it is a key piece of our modern life. After wrestling with some DNS issues I decided learning more about the protocol and implementing it myself would be a fun project so I set to work using Rust!</p> <p>This project made me significantly more comfortable working at the bit level and using bitwise operations.</p> <p>Currently, the server can parse and resolve a domain for queries with A, NS, CNAME, MX, and AAAA records.</p> <p>Source code available on <a href="https://github.com/Didgety/pine-dns">GitHub</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Capable of handling a variety of record types, using external resolvers, and recursively resolving queries]]></summary></entry><entry><title type="html">Rusted Rogue - An ASCII Roguelike Game</title><link href="https://didgety.github.io/blog/2023/rusted_rogue/" rel="alternate" type="text/html" title="Rusted Rogue - An ASCII Roguelike Game"/><published>2023-12-08T00:00:00+00:00</published><updated>2023-12-08T00:00:00+00:00</updated><id>https://didgety.github.io/blog/2023/rusted_rogue</id><content type="html" xml:base="https://didgety.github.io/blog/2023/rusted_rogue/"><![CDATA[<p>After finishing <a href="https://doc.rust-lang.org/book/">“The Book”</a> of Rust I decided to sink my teeth into a larger project. My interest in generative algorithms led me down the path of creating an ASCII roguelike game. Choosing a simple art style allowed me to focus on applying the language well and implementing cool algorithms like <a href="https://github.com/mxgmn/WaveFunctionCollapse">Wave Function Collapse</a>.</p> <p>The game utilizes the <a href="https://crates.io/crates/specs">Specs</a> library to run an entity component system, the <a href="https://crates.io/crates/rltk">RLTK</a> libary which provides some handy utilities for games, and the <a href="https://crates.io/crates/serde">Serde</a> library for serialization and deserialization. Utilizing composition provided tremendous flexibility in adding unique properties to otherwise identical entities. Graphics consist of the CP437 character set and a scanline postprocessing effect to mimic the look of CRT screens.</p> <p>An assortment of algorithms procedurally generate each level and outputs can be fed into other algorithms to increase the variation between levels. Most algorithms also benefit from having variables that can be tweaked using my map builder API to provide even more variety. Currently, the following algorithms have been implemented:</p> <ul> <li>Binary Space Partition-like</li> <li>Cellular Automata</li> <li>Diffusion Limited Aggegation</li> <li>Drunkards Walk</li> <li>Mazes</li> <li>Prefabricated maps and sectionals</li> <li>Rooms and Corridors (rectangles connected by paths)</li> <li>Voronoi Hive</li> <li>Wave Function Collapse</li> </ul> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mapgen-480.webp 480w,/assets/img/mapgen-800.webp 800w,/assets/img/mapgen-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/mapgen.png" class="img-fluid rounded mx-auto d-block z-depth-1" width="500" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Map generation displayed at startup. </div> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/cave_map_with_tooltip-480.webp 480w,/assets/img/cave_map_with_tooltip-800.webp 800w,/assets/img/cave_map_with_tooltip-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/cave_map_with_tooltip.png" class="img-fluid rounded mx-auto d-block z-depth-1" width="500" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> A cave map with a variety of enemies and items. You can see the bloodstains from combat around the yellow player. Good thing there's a potion nearby! FOV increased for this picture. </div> <p>Other features include:</p> <ul> <li>Hunger</li> <li>Item System <ul> <li>Potions, rations</li> <li>Spell scrolls</li> </ul> </li> <li>Equipment System <ul> <li>Armor slot</li> <li>Weapon slot</li> </ul> </li> <li>Enemy AI <ul> <li>Each enemy has its own field of view</li> </ul> </li> <li>Scaling <ul> <li>New items spawn and enemies get stronger as you go down levels</li> </ul> </li> <li>Particle effects <ul> <li>Combat</li> <li>Bloodstains</li> <li>Effects from items</li> </ul> </li> <li>Loading maps from ASCII or REX files</li> </ul> <p>Serde is used to create and load save files via serialization. A savefile.json is created when exiting the game by pressing <code class="language-plaintext highlighter-rouge">escape</code>. The presence of this file enables the load game option. Death deletes the save file.</p> <p>Source code available on <a href="https://github.com/Didgety/rusted_rogue">GitHub</a></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Written using Rust, this game utilizes a variety of algorithms to procedurally generate levels]]></summary></entry><entry><title type="html">Chladni Plate Particle Simulation</title><link href="https://didgety.github.io/blog/2023/chladni_plate_simulation/" rel="alternate" type="text/html" title="Chladni Plate Particle Simulation"/><published>2023-09-20T00:00:00+00:00</published><updated>2023-09-20T00:00:00+00:00</updated><id>https://didgety.github.io/blog/2023/chladni_plate_simulation</id><content type="html" xml:base="https://didgety.github.io/blog/2023/chladni_plate_simulation/"><![CDATA[<p>Chladni patterns are cool. I first read about them on <a href="https://paulbourke.net/geometry/chladni/">Paul Bourke’s blog</a>. Essentially, they are patterns that arise from certain frequencies on a bounded surface. The classic example is a violin bow pulled across the edge of a metal plate with salt on it.</p> <figure> <iframe src="https://www.youtube.com/embed/lRFysSAxWxI" class="w-100 rounded shadow" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="450"/> </figure> <p>Chladni patterns fall under the umbrella of the field of cymatics. There are similar phenomena that can be observed all over. For example, in fluids there are faraday waves. One of my favorite demonstrations of this branch of physics is this <a href="https://www.youtube.com/watch?v=KijiWlTJp3Y">youtube video</a> which unfortunately does not allow playback when embedded.</p> <p>The equation for Chladni patterns on a rectangular bounded surface is given by:</p> \[\Bigl[\cos\left(\frac{n\pi x}{L}\right)\cdot\cos\left(\frac{m\pi y}{L}\right)\Bigr] - \Bigl[\cos\left(\frac{m\pi x}{L}\right)\cdot\cos\left(\frac{n\pi y}{L}\right)\Bigr] = 0\] <p>This equation was recreated using the <a href="https://derivative.ca/UserGuide/Math_CHOP">Math</a> and <a href="https://docs.derivative.ca/Function_CHOP">Function</a> CHOPs in <a href="https://derivative.ca/">TouchDesigner</a>. Adding two more channels allowed it to be represented as a 2D texture using <a href="https://docs.derivative.ca/CHOP_to_TOP">CHOP to TOP</a>. A few more tweaks to clean up the texture and a nice normal map was created using the <a href="https://docs.derivative.ca/Normal_Map_TOP">Normal Map</a> TOP. The normal map provides the velocity at any given point in the texture.</p> <p>All that’s left is to create a particle system. This was achieved using some noise and a GLSL shader to utilize the information encoded in the normal map that was just created. 2D noise was created with the <a href="https://docs.derivative.ca/Noise_TOP">Noise</a> TOP and fed into a <a href="https://docs.derivative.ca/GLSL_Multi_TOP">GLSL Multi</a> TOP along with a <a href="https://docs.derivative.ca/Feedback_TOP">Feedback</a> TOP.</p> <p>The shader code:</p> <div class="language-glsl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">out</span> <span class="kt">vec4</span> <span class="n">fragColor</span><span class="p">;</span>

<span class="k">uniform</span> <span class="kt">float</span> <span class="n">speed</span><span class="p">;</span>

<span class="k">uniform</span> <span class="kt">vec2</span> <span class="n">vel_add</span><span class="p">;</span>
<span class="k">uniform</span> <span class="kt">vec2</span> <span class="n">vel_scalar</span><span class="p">;</span>

<span class="k">uniform</span> <span class="kt">vec2</span> <span class="n">pos_add</span><span class="p">;</span>
<span class="k">uniform</span> <span class="kt">vec2</span> <span class="n">pos_scalar</span><span class="p">;</span>
<span class="k">uniform</span> <span class="kt">vec2</span> <span class="n">pos_add_vel_toggle</span><span class="p">;</span>
<span class="k">uniform</span> <span class="kt">vec2</span> <span class="n">pos_vel_scalar</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// sTD2DInputs are the incoming TOP connections</span>
    <span class="c1">// [0] - Feedback TOP</span>
    <span class="c1">// [1] - Noise TOP (Initial state)</span>
    <span class="c1">// [2] - Normal Map TOP (Provides the velocity information)</span>
	<span class="kt">vec4</span> <span class="n">position</span> <span class="o">=</span> <span class="n">texture</span><span class="p">(</span><span class="n">sTD2DInputs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">vUV</span><span class="p">.</span><span class="n">st</span><span class="p">);</span>
	<span class="kt">vec4</span> <span class="n">initial</span> <span class="o">=</span> <span class="n">texture</span><span class="p">(</span><span class="n">sTD2DInputs</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">vUV</span><span class="p">.</span><span class="n">st</span><span class="p">);</span>
	<span class="kt">vec4</span> <span class="n">velocity</span> <span class="o">=</span> <span class="n">texture</span><span class="p">(</span><span class="n">sTD2DInputs</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">position</span><span class="p">.</span><span class="n">xy</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">+</span> <span class="p">.</span><span class="mi">5</span><span class="p">);</span>

	<span class="n">velocity</span> <span class="o">=</span> <span class="n">velocity</span> <span class="o">*</span> <span class="mi">2</span><span class="p">.</span><span class="mi">0</span> <span class="o">-</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

	<span class="kt">vec2</span> <span class="n">derivative</span> <span class="o">=</span> <span class="kt">vec2</span><span class="p">(</span><span class="n">dFdx</span><span class="p">(</span><span class="n">position</span><span class="p">.</span><span class="n">r</span><span class="p">),</span> <span class="n">dFdy</span><span class="p">(</span><span class="n">position</span><span class="p">.</span><span class="n">y</span><span class="p">));</span>

	<span class="c1">// velocity modifier</span>
	<span class="n">velocity</span><span class="p">.</span><span class="n">st</span> <span class="o">+=</span> <span class="n">derivative</span> <span class="o">*</span> <span class="p">.</span><span class="mo">05</span><span class="p">;</span>
	<span class="n">velocity</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">vel_add</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
	<span class="n">velocity</span><span class="p">.</span><span class="n">y</span> <span class="o">+=</span> <span class="n">vel_add</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
	<span class="n">velocity</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">vel_scalar</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
	<span class="n">velocity</span><span class="p">.</span><span class="n">y</span> <span class="o">*=</span> <span class="n">vel_scalar</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
	<span class="c1">// position modifiers</span>
	<span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">pos_add</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
	<span class="n">position</span><span class="p">.</span><span class="n">y</span> <span class="o">+=</span> <span class="n">pos_add</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
	<span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="o">*=</span> <span class="n">pos_scalar</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
	<span class="n">position</span><span class="p">.</span><span class="n">y</span> <span class="o">*=</span> <span class="n">pos_scalar</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>

	<span class="c1">// adds current particle velocity to particle if uniform value is set to 1</span>
	<span class="k">if</span><span class="p">(</span><span class="n">pos_add_vel_toggle</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="n">velocity</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">pos_vel_scalar</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">if</span><span class="p">(</span><span class="n">pos_add_vel_toggle</span><span class="p">.</span><span class="n">y</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">position</span><span class="p">.</span><span class="n">y</span> <span class="o">+=</span> <span class="n">velocity</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">pos_vel_scalar</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="n">position</span> <span class="o">+=</span> <span class="n">velocity</span> <span class="o">*</span> <span class="n">speed</span><span class="p">;</span>

    <span class="c1">// reset particle position if out of bounds</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="o">-</span><span class="p">.</span><span class="mi">995</span> <span class="o">||</span> <span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="p">.</span><span class="mi">995</span> <span class="o">||</span> <span class="n">position</span><span class="p">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="o">-</span><span class="p">.</span><span class="mi">995</span> <span class="o">||</span> <span class="n">position</span><span class="p">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="p">.</span><span class="mi">995</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">position</span> <span class="o">=</span> <span class="n">initial</span><span class="p">;</span>
	<span class="p">}</span>
	
	<span class="n">fragColor</span> <span class="o">=</span> <span class="n">TDOutputSwizzle</span><span class="p">(</span><span class="n">position</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>TouchDesigner provides a useful interface for modifying the values of GLSL uniforms through its GUI while also allowing them to be modified in real time through automation. I really love how this program provides the flexibility to experiment rapidly while also providing low level access. There is even a C++ API available for writing custom operators.</p> <p>At this point, I have a 2D texture with all the information needed to create a particle system. Particles can easily be instantiated using the <a href="https://docs.derivative.ca/Add_SOP">Add</a> SOP hooked up to a <a href="https://docs.derivative.ca/Geometry_COMP">Geometry</a> COMP. Hooking up the output from the GLSL Multi TOP in the instantiation menu of the Geometry COMP gives a working particle system. (It’s a little bit more complicated than that, but this isn’t meant to be a TouchDesigner tutorial)</p> <figure> <iframe src="https://www.youtube.com/embed/_lBAmrzcgJ0" class="w-100 rounded shadow" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="450"/> </figure> <p>It’s got a bit of flashing from the automation being applied - but that is used when more effects are applied. The magic of TouchDesigner is layering your components to get really interesting visual effects. After experimenting with this base for a while, I hooked up one of my favorite effects to some music to create an audioreactive animation being rendered in real time. Information was extracted from specific frequencies of the audio to drive different parameters. For example, the kick drum for this song was read slightly below 100Hz to power the pulsing animation change.</p> <p>Resolution is limited since I used the Non-Commercial license of TouchDesigner.</p> <figure> <iframe src="https://www.youtube.com/embed/3auqchAobKA" class="w-100 rounded shadow" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="450"/> </figure>]]></content><author><name></name></author><summary type="html"><![CDATA[Visualizing some fun physics phenomena]]></summary></entry><entry><title type="html">Quantum Computing - Eavesdropping Detection and Information Loss in Optical Networks</title><link href="https://didgety.github.io/blog/2023/qkd_research_project/" rel="alternate" type="text/html" title="Quantum Computing - Eavesdropping Detection and Information Loss in Optical Networks"/><published>2023-06-16T00:00:00+00:00</published><updated>2023-06-16T00:00:00+00:00</updated><id>https://didgety.github.io/blog/2023/qkd_research_project</id><content type="html" xml:base="https://didgety.github.io/blog/2023/qkd_research_project/"><![CDATA[<p>In Spring 2023, as part of the Edmonds College Physics Department, I completed a quarter-long undergraduate research project exploring the quantum properties of optical information channels. I was curious if there was a point when information loss would become indistinguishable from detection of an eavesdropper. At the distances I was able to test, I found minimal information loss without the presence of an observer indicating these are stable distances for transmission. To further explore this line of research I would need a different set of equipment. I created a poster to present my findings at the Edmonds College Undergraduate Research Symposium in June of 2023. A final research paper typeset with LaTeX provided a detailed outline of the methodology, findings, and data.</p> <p>The project involved implementing the <a href="https://en.wikipedia.org/wiki/BB84">BB-84</a> cryptographic protocol by programming an Arduino UNO to control a laser diode and sensor.</p> <p>Source code available on <a href="https://github.com/Didgety/QKD_Principles_Demo/">GitHub</a></p> <div style="max-width: 800px; width: 100%; height: auto; margin: auto;"> <object data="/assets/pdf/spr2023_qkd_ugr_poster.pdf" type="application/pdf" style="width: 100%; height: 700px; border: none;"> </object> </div> <div style="max-width: 800px; width: 100%; height: auto; margin: auto;"> <object data="/assets/pdf/spr2023_qkd_ugr_paper.pdf" type="application/pdf" style="width: 100%; height: 700px; border: none;"> </object> </div>]]></content><author><name></name></author><summary type="html"><![CDATA[Undergraduate research project as part of the Edmonds College Physics Department]]></summary></entry><entry><title type="html">Fourier Analysis Presentation</title><link href="https://didgety.github.io/blog/2023/fourier_analysis_presentation/" rel="alternate" type="text/html" title="Fourier Analysis Presentation"/><published>2023-02-25T00:00:00+00:00</published><updated>2023-02-25T00:00:00+00:00</updated><id>https://didgety.github.io/blog/2023/fourier_analysis_presentation</id><content type="html" xml:base="https://didgety.github.io/blog/2023/fourier_analysis_presentation/"><![CDATA[<p>In February of 2023 I gave this presentation on Fourier Analysis for the Western Washington Community College Student Mathematics Conference. It was typeset using LaTeX and the beamer package.</p> <div style="width: 100%; height: auto; margin: auto;"> <object data="/assets/pdf/fourier_series_presentation_no_enumeration.pdf" type="application/pdf" style="width: 100%; height: 700px; border: none;"> </object> </div> <p>Example 1: Fourier Approximation <a href="https://www.shadertoy.com/view/ltKSWD">(Source)</a></p> <figure> <video src="/assets/video/fourier-interp.mp4" class="w-100 h-auto rounded shadow" width="auto" height="auto" controls=""/> </figure> <p>Example 2: Fourier Interpolation <a href="https://www.shadertoy.com/view/4lGSDw">(Source)</a></p> <figure> <video src="/assets/video/fourier-trans.mp4" class="w-100 h-auto rounded shadow" width="auto" height="auto" controls=""/> </figure> <p>Rendering of 1, 5 and 50 epicycles</p> <figure> <video src="/assets/video/fs_visualization_1_5_50_epicycles.mp4" class="w-100 h-auto rounded shadow" width="auto" height="auto" controls=""/> </figure> <p>Source code (p5.js):</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">let</span> <span class="n">time</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">let</span> <span class="n">wave</span> <span class="o">=</span> <span class="p">[[],[],[]]</span>

<span class="o">//</span> <span class="n">white</span><span class="p">,</span> <span class="n">red</span><span class="p">,</span> <span class="n">purple</span><span class="p">,</span> <span class="n">blue</span><span class="p">,</span> <span class="n">green</span><span class="p">,</span> <span class="n">another</span> <span class="n">blue</span>
<span class="n">let</span> <span class="n">colors</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">],</span> <span class="p">[</span><span class="mi">220</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">60</span><span class="p">],</span> <span class="p">[</span><span class="mi">255</span><span class="p">,</span> <span class="mi">204</span><span class="p">,</span> <span class="mi">60</span><span class="p">],</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">100</span><span class="p">],</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">255</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">100</span><span class="p">]];</span>


<span class="n">function</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">createCanvas</span><span class="p">(</span><span class="mi">1920</span><span class="p">,</span> <span class="mi">1080</span><span class="p">);</span>
  <span class="nf">strokeWeight</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">function</span> <span class="nf">draw</span><span class="p">()</span> <span class="p">{</span>
  <span class="nf">background</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="nf">draw_wave</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="nf">draw_wave</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
  <span class="nf">draw_wave</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>

  <span class="n">time</span> <span class="o">+=</span> <span class="mf">0.015</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">function</span> <span class="nf">draw_wave</span><span class="p">(</span><span class="n">epicycles</span><span class="p">,</span> <span class="n">translate_y</span><span class="p">,</span> <span class="n">wave_num</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">translate</span><span class="p">(</span><span class="mi">250</span><span class="p">,</span> <span class="n">translate_y</span><span class="p">);</span>

  <span class="o">//</span><span class="k">for</span> <span class="n">coloring</span> <span class="n">the</span> <span class="n">epicycles</span>
  <span class="n">let</span> <span class="n">color_index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="n">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">let</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="o">//</span><span class="n">draws</span> <span class="n">wave</span> <span class="k">with</span> <span class="n">specified</span> <span class="n">number</span> <span class="n">of</span> <span class="n">epicycles</span>
  <span class="nf">for</span><span class="p">(</span><span class="n">let</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">epicycles</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">let</span> <span class="n">stroke_red</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="n">color_index</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">let</span> <span class="n">stroke_green</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="n">color_index</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">let</span> <span class="n">stroke_blue</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="n">color_index</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span>

    <span class="n">let</span> <span class="n">prevx</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
    <span class="n">let</span> <span class="n">prevy</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>

    <span class="n">let</span> <span class="n">n</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">let</span> <span class="n">radius</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">*</span> <span class="p">(</span><span class="mi">4</span> <span class="o">/</span> <span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="n">PI</span><span class="p">));</span>
    <span class="n">x</span> <span class="o">+=</span> <span class="n">radius</span> <span class="o">*</span> <span class="nf">cos</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="n">time</span><span class="p">);</span>
    <span class="n">y</span> <span class="o">+=</span> <span class="n">radius</span> <span class="o">*</span> <span class="nf">sin</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="n">time</span><span class="p">);</span>    

    <span class="o">//</span><span class="n">draws</span> <span class="n">epicycle</span> <span class="n">circles</span>
    <span class="nf">stroke</span><span class="p">(</span><span class="n">stroke_red</span><span class="p">,</span> <span class="n">stroke_blue</span><span class="p">,</span> <span class="n">stroke_green</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
    <span class="nf">noFill</span><span class="p">();</span>
    <span class="nf">ellipse</span><span class="p">(</span><span class="n">prevx</span><span class="p">,</span> <span class="n">prevy</span><span class="p">,</span> <span class="n">radius</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
    
    <span class="o">//</span><span class="n">draws</span> <span class="n">points</span> <span class="n">on</span> <span class="n">circles</span>
    <span class="nf">fill</span><span class="p">(</span><span class="mi">255</span><span class="p">);</span>
    <span class="nf">stroke</span><span class="p">(</span><span class="n">stroke_red</span><span class="p">,</span> <span class="n">stroke_blue</span><span class="p">,</span> <span class="n">stroke_green</span><span class="p">);</span>
    <span class="nf">line</span><span class="p">(</span><span class="n">prevx</span><span class="p">,</span> <span class="n">prevy</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
    <span class="nf">ellipse</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
    
    <span class="n">color_index</span><span class="o">++</span><span class="p">;</span>
      <span class="nf">if</span><span class="p">(</span><span class="n">color_index</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">color_index</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
      <span class="p">}</span>
  <span class="p">}</span>

  <span class="o">//</span> <span class="n">appends</span> <span class="n">y</span> <span class="n">coordinate</span> <span class="n">to</span> <span class="n">the</span> <span class="n">beginning</span> <span class="n">of</span> <span class="n">the</span> <span class="n">array</span>
  <span class="n">wave</span><span class="p">[</span><span class="n">wave_num</span><span class="p">].</span><span class="nf">unshift</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>
  
  <span class="nf">stroke</span><span class="p">(</span><span class="mi">255</span><span class="p">);</span>
  <span class="nf">translate</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="nf">line</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">400</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">wave</span><span class="p">[</span><span class="n">wave_num</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>

  <span class="nf">beginShape</span><span class="p">();</span>
  <span class="nf">noFill</span><span class="p">();</span>
  <span class="nf">for</span><span class="p">(</span><span class="n">let</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">wave</span><span class="p">[</span><span class="n">wave_num</span><span class="p">].</span><span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">vertex</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">wave</span><span class="p">[</span><span class="n">wave_num</span><span class="p">][</span><span class="n">i</span><span class="p">]);</span>
  <span class="p">}</span>
  <span class="nf">endShape</span><span class="p">();</span>

  <span class="o">//</span> <span class="n">prevents</span> <span class="n">array</span> <span class="k">from</span> <span class="n">being</span> <span class="n">filled</span> <span class="n">infinitely</span>
  <span class="nf">if</span><span class="p">(</span><span class="n">wave</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">1500</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">wave</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">pop</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="nf">if</span><span class="p">(</span><span class="n">wave</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">1500</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">wave</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">pop</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="nf">if</span><span class="p">(</span><span class="n">wave</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">1500</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">wave</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">pop</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="o">//</span> <span class="n">resets</span> <span class="n">position</span>
  <span class="nf">translate</span><span class="p">(</span><span class="o">-</span><span class="mi">650</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[A presentation given for the Western Washington Community College Student Mathematics Conference]]></summary></entry></feed>